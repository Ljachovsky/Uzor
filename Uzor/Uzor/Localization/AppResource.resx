<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Basics" xml:space="preserve">
    <value>Basics</value>
  </data>
  <data name="BeforeStep" xml:space="preserve">
    <value>Before Uzor</value>
  </data>
  <data name="BufferSavingLabel" xml:space="preserve">
    <value>Saving as Image:</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Crop" xml:space="preserve">
    <value>Crop</value>
  </data>
  <data name="DeleteQuestion" xml:space="preserve">
    <value>Are you sure you want to delete the item?</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="DistancesValue" xml:space="preserve">
    <value>Distances value:</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ExitQuestion" xml:space="preserve">
    <value>Are you sure you want to get out?</value>
  </data>
  <data name="ExportProjects" xml:space="preserve">
    <value>Export projects in folder...</value>
  </data>
  <data name="Finishing" xml:space="preserve">
    <value>Finishing</value>
  </data>
  <data name="FirstUzorEdit" xml:space="preserve">
    <value>Edit first Uzor</value>
  </data>
  <data name="FormatLabel" xml:space="preserve">
    <value>Format:</value>
  </data>
  <data name="ImportProjects" xml:space="preserve">
    <value>Import projects</value>
  </data>
  <data name="LanguageLabel" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="LongUzorDescription" xml:space="preserve">
    <value>Long pattern - a full version of the form of the classic Belarusian pattern, consisting of three single</value>
  </data>
  <data name="LongUzorTip1" xml:space="preserve">
    <value>Draw two elements and go to manage your pattern-project</value>
  </data>
  <data name="LongUzorTip2" xml:space="preserve">
    <value>All basic parameters are changed in the first tab</value>
  </data>
  <data name="MakeLongUzor" xml:space="preserve">
    <value>Make Finnaly Uzor!</value>
  </data>
  <data name="MakeUzor" xml:space="preserve">
    <value>Make Uzor</value>
  </data>
  <data name="Mirror" xml:space="preserve">
    <value>Mirror</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name: </value>
  </data>
  <data name="NewUzor" xml:space="preserve">
    <value>New Uzor</value>
  </data>
  <data name="NextStep" xml:space="preserve">
    <value>Next Uzor</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="OffTips" xml:space="preserve">
    <value>Do not show again</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Opacity" xml:space="preserve">
    <value>Opacity</value>
  </data>
  <data name="OptimizationLabel" xml:space="preserve">
    <value>Rendering optimization:</value>
  </data>
  <data name="PermissionDenied" xml:space="preserve">
    <value>file access must be enabled!</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SavedInLabel" xml:space="preserve">
    <value>File saved in:</value>
  </data>
  <data name="SavedLabel" xml:space="preserve">
    <value>Saved</value>
  </data>
  <data name="SaveProjectColor" xml:space="preserve">
    <value>Save current project color</value>
  </data>
  <data name="SavingLabelTip" xml:space="preserve">
    <value>Saving</value>
  </data>
  <data name="SavingProject" xml:space="preserve">
    <value>Saving project:</value>
  </data>
  <data name="SecondUzorEdit" xml:space="preserve">
    <value>Edit second Uzor</value>
  </data>
  <data name="SelectItem" xml:space="preserve">
    <value>Select Uzor:</value>
  </data>
  <data name="SetFrontColorToAll" xml:space="preserve">
    <value>Set front color to all elements: </value>
  </data>
  <data name="Setting" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="SideUzorEdit" xml:space="preserve">
    <value>Edit Side Uzor</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Size:</value>
  </data>
  <data name="SquareUzorDescription" xml:space="preserve">
    <value>Сreating single pattern in a square format. Can be used for long patterns</value>
  </data>
  <data name="SwitchRenderingAlert" xml:space="preserve">
    <value>Rendering-mode is set to "Low"</value>
  </data>
  <data name="Tip1" xml:space="preserve">
    <value>Draw some symmetrical dots in the center and start generation</value>
  </data>
  <data name="Tip2" xml:space="preserve">
    <value>Use the mirror-tool for symmetrical drawing</value>
  </data>
  <data name="Tip3" xml:space="preserve">
    <value>Crop the finished field</value>
  </data>
  <data name="Tip3_2" xml:space="preserve">
    <value>You can remove the crop by sliding the slider to the start position</value>
  </data>
  <data name="Tip4" xml:space="preserve">
    <value>You can always save as a project, save an image and share it</value>
  </data>
  <data name="Tip4_2" xml:space="preserve">
    <value>.ubf and .lubf project-files are imported and exported in the settings</value>
  </data>
  <data name="TipsEnableTip" xml:space="preserve">
    <value>(you can enable tips in the settings)</value>
  </data>
  <data name="ViewTips" xml:space="preserve">
    <value>Show tips</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>